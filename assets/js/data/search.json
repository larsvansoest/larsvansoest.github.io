[ { "title": "Creating a Free Markdown Dev Blog Using Github Pages and Google Cloud", "url": "/posts/creating-a-dev-blog/", "categories": "GitHub Pages, Google Cloud", "tags": "dev blog, markdown, github pages, google cloud, chirpy jekyll theme, jekyll, disqus, git", "date": "2021-12-08 23:35:00 +0100", "snippet": "In this post, we set up a responsive and interactive dev blog using GitHub Pages in combination with the Chirpy Jekyll Theme and Google Cloud. The blog has the same setup as vanSoest.dev, featuring view counts, tags, categories, a search bar, and a dark theme toggle. The blog should provide any developer with a portfolio to easily and aesthetically collect sharable guides, notes, thoughts, and opinions using Markdown. Whatâ€™s more, the blog is completely free, and without licensing restrictions.In an overview, we setup a GitHub Pages repository with Chirpy Jekyll Theme anda CDN with Google Cloud.Markdown Dev Blog | GitHub PagesSource: Getting Started | ChirpyIn the steps below, we setup our main dev blog website. In short, we set up a GitHub Pages repository with the Chirpy Jekyll Theme. Optionally, we may set a custom domain with a certificate for https.Creating a GitHub AccountIn order to continue, we need a GitHub account, sign up here. In the steps below, the GitHub account name is referred to as &amp;lt;github_username&amp;gt;. Moreover, in case a custom domain is not desired, note that the blog URL will match &amp;lt;github_username&amp;gt;.github.io.Setting up GitHub PagesWe use Chirpy Jekyll Theme as our GitHub Pages theme. As mentioned by Getting Started | Chirpy, there are two ways to set up the blog. Using the Chirpy Starter Forking on GitHub For simplicity, we use the first step. Accordingly, follow the steps below. Sign in on GitHub. Create a new repository from chirpy-starter. Set the Owner to the GitHub user &amp;lt;github_username&amp;gt;. Set the Repository Name to &amp;lt;github_username&amp;gt;.github.io. Set to public (default). Uncheck Include all branches (default). Now, we have successfully created the repository. Clone the repository locally. If you are unfamiliar with git, checkout GitHub Git Guide and git-scm. In the local repository folder, set the value for property url of _config.yml to https://&amp;lt;github_username&amp;gt;.github.io, then push the change to trigger a GitHub Action to publish the blog. Head to https://github.com/&amp;lt;github_username&amp;gt;/&amp;lt;github_username&amp;gt;.github.io/actions, or Actions on the repository. Check the publishing status. After a few minutes, once resolved, a new branch gh-pages is added to the repository on GitHub, which contains the built source of the blog page. Head to https://github.com/&amp;lt;github_username&amp;gt;/&amp;lt;github_username&amp;gt;.github.io/settings/pages or Settings &amp;gt; Pages on the repository, and set the page source as follows. Set Branch to gh-pages. Set Folder to /(root). Click Save. After a few minutes, head to https://&amp;lt;github_username&amp;gt;.github.io and view the new website. With the steps above, we have created the base dev blog website. For the rest of this section, we investigate personalisation. In short, we set up a custom domain and modify the pageâ€™s css and favicon.Custom DomainIn this section, we setup a custom apex domain with https support. Moreover, we configure the DNS by setting up A-records for the domain and its www subdomain. Subsequently, GitHub creates and maintains the required certificates for us. For instructions on how to configure a subdomain and other alternative methods, see Managing a custom domain for your GitHub Pages site - GitHub Docs. To use a domain, we must own it. So, for starters, make sure to own the desired domain for the blog. In the DNS settings of the domain, add the following A-records. Type Name Value A @ 185.199.108.153 A @ 185.199.109.153 A @ 185.199.110.153 A @ 185.199.111.153 A www &amp;lt;github_username&amp;gt;.github.io DNS changes can take up to 48 hours. If an error occurs, ensure the A-records are correct and wait for the changes to resolve. Head to https://github.com/&amp;lt;github_username&amp;gt;/&amp;lt;github_username&amp;gt;.github.io/settings/pages or Settings &amp;gt; Pages on the repository. Under custom domain, enter the configured domain, and click save. Set the value of property url of _config.yml to the desired domain name (e.g. https://vansoest.dev). Type the configured custom domain in the browser and view the blog. Page CustomisationIn the steps below, we customise the blogâ€™s stylesheet and favicon. To do so, add the folder /assets/ relative to the project folder.For reference, after customising the css and changing the favicon below, the project structure should match the example project structure below.ðŸ“¦&amp;lt;github-username&amp;gt;.github.io â”£ ... â”£ ðŸ“‚assets â”ƒ â”£ ðŸ“‚css â”ƒ â”ƒ â”— ðŸ“œstyle.scss â”ƒ â”— ðŸ“‚img â”ƒ â”ƒ â”— ðŸ“‚favicons â”ƒ â”ƒ â”ƒ â”£ ðŸ“œandroid-chrome-192x192.png â”ƒ â”ƒ â”ƒ â”£ ðŸ“œandroid-chrome-512x512.png â”ƒ â”ƒ â”ƒ â”£ ðŸ“œapple-touch-icon.png â”ƒ â”ƒ â”ƒ â”£ ðŸ“œbrowserconfig.xml â”ƒ â”ƒ â”ƒ â”£ ðŸ“œfavicon-16x16.png â”ƒ â”ƒ â”ƒ â”£ ðŸ“œfavicon-32x32.png â”ƒ â”ƒ â”ƒ â”£ ðŸ“œfavicon.ico â”ƒ â”ƒ â”ƒ â”£ ðŸ“œmstile-150x150.png â”ƒ â”ƒ â”ƒ â”— ðŸ“œsite.webmanifest â”£ ...CSSWe customise the stylesheet with a new SCSS file. With this file, we overwrite and add CSS rules. Relative to the project folder, create folder /assets/css/ and file /assets/css/style.scss. Create a new file assets/css/style.scss, and add the contents of Chirpyâ€™s style.scss. In this new file, any css customisation we may add under the fileâ€™s contents. For further reference, consider the avatar size modification of vanSoest.dev.FaviconSource: Customize the Favicon | ChirpyTo change the blogâ€™s favicon, prepare a square image of size 512x512 or more, and follow the steps below. Relative to the project folder, create folders /assets/img/ and /assets/img/favicons/. Create new files assets/img/favicons/browserconfig.xml and assets/img/favicons/site.webmanifest, and add the contents of Chirpyâ€™s browserconfig.xml and site.webmanifest respectively. Upload the square image to Real Favicon Generator. Scroll down and click Generate your Favicons and HTML code. Download the package by clicking Favicon Package. Extract and add all .png and .ico files to /assets/img/favicons/. For reference, check if the folder structure matches the one illustrated above.Running LocallyTo preview the blog locally, follow the steps below. Based on the operating system, follow the instructions at Installation | Jekyll. Relative to the project folder, execute bundle install and bundle exec jekyll s. To view the blog, navigate to localhost:4000 or 127.0.0.1:4000 in the web browser. Once satisfied, to publish the changes, commit the changes to the remote repository.CDN with Google CloudLast but not least, we set up the content delivery network (CDN) for our images. With the steps below, with Google Cloud, we set up a load balancer to cache and deliver imagery for our posts. In the steps below, we use a subdomain of the custom domain to enable https. For the steps below, if prompted to enable a required API (e.g. Compute Engine API), enable it to continue.Creating a ProjectFor starters, we need a project to construct our infrastructure. Navigate to console.cloud.google.com and login or create an account. Create a new project and select it as the current project. Creating a BucketBelow, we set up a bucket to store the blogâ€™s content and make it public. With the project selected, type storage in the search bar and click on Cloud Storage and Create Bucket. Enter a name for your bucket and select the desired region(s). In Choose how to control access to objects, uncheck Enforce public access prevention on this bucket. Leave the rest of the options as default. Click Create. Now, we set the bucket to public. In the bucket details view, click Permissions and, click Grant Access. Add allUsers as principals and select the role Storage Object Viewer. When prompted, click Allow Public Access. This enables public access. Enabling public access for a bucket will make its contents accessible to the internet. Be mindful when uploading files.Setting up the Load balancerIn the steps below, we setup cloud CDN with a load balancer, which can be accessed through the subdomain load balancer of our custom domain. With the project selected, type load balancer in the search bar and click on Load Balancing. Click Create Load Balancer and Start Configuration for HTTP(S) Load Balancing. Keep the default options, and continue. If the page fails to load after clicking continue, ensure the Compute Engine API is enabled. Configure the Load Balancer as follows. At Frontend configuration, enter a name, and select https as protocol. At Certificate, click Create a New Certificate, enter a name, select Create Google-managed certificate, enter loadbalancer.&amp;lt;custom_domain&amp;gt; at domains, and click Create. At Backend configuration, select the dropdown for Backend services &amp;amp; backend buckets and Create a Backend Bucket. Enter a name, select the bucket created above, select Enable Cloud CDN, keep the default options, and click Create. At Routing Rules, set mode to Simple host and path rule, select the backend bucket created above. Review the load balancerâ€™s settings and click Create. At the created load balancerâ€™s details, find the load balancerâ€™s ip-adress. Modify the DNS of your custom domain by adding the following rule. Type Name Value A loadbalancer &amp;lt;loadbalancer_ip&amp;gt; It might take around 1 or 2 hours for the DNS and certificate to resolve. In _config.yml of the project, set the value for property image_cdn to https://loadbalancer.&amp;lt;custom_domain&amp;gt;. Upload and Use ImageryAfter the steps above, to use images in our posts, we can upload them to our bucket and reference them in our markdown file.To upload images to the bucket, select the project in Google Cloud. Then, type storage in the search bar and click on Cloud Storage. Select the bucket created above, and set up a file structure as desired. An image can be referenced in a post with ![alt text](/relative/path/to/image).NotesDisqus Comment SectionsThe Chirpy Jekyll Theme comes with the option to set up a comment section by Disqus. However, Disqusâ€™ free plan users must show advertisements inside the comment sections. Whatâ€™s more, watermarks from the company can only be removed with a pro plan. Therefore, this feature is left out of the guide. In the future, we might integrate an open-source comment section with the theme." } ]
